package com.costsestimationbackend.costsestimationbackend.resource;

import com.costsestimationbackend.costsestimationbackend.config.jwt.JwtTokenUtil;
import com.costsestimationbackend.costsestimationbackend.model.User;
import com.costsestimationbackend.costsestimationbackend.repository.UserRepository;
import com.costsestimationbackend.costsestimationbackend.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.web.bind.annotation.*;

@CrossOrigin
@RestController    // This means that this class is a Controller
//@RequestMapping(path = "/users") // This means URL's start with /demo (after Application path)
public class MainController {
//    @Autowired // This means to get the bean called userRepository
//    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private UserRepository userRepository;
//
    //Read all
//    @PreAuthorize("hasAnyRole('ADMIN')")
    @GetMapping(path = "/users")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

        //Create
    @PostMapping(path = "/users/add")
    public void createUser(@RequestBody User user) {
        User savedUser = userRepository.save(user);

//        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
//                .buildAndExpand(savedUser.getIdUser()).toUri();
//
//        return ResponseEntity.created(location).build();

    }


//
////    @RequestMapping("/login")
////    public @ResponseBody boolean login(@RequestBody User user) {
////
//////        return
//////                user.getLogin().equals("user") && user.getPassword().equals("user") ||
//////                        user.getLogin().equals("admin") && user.getPassword().equals("admin");
////        User foundUser = userRepository.findByLogin(user.getLogin())
////                .orElseThrow(() -> new UserNotFoundException());
////        if(foundUser.getPassword().equals(user.getPassword())){
////            return true;
////        }
////        return false;
////    }
//
//    //Create
//    @PostMapping("/users/add")
//    public ResponseEntity<Object> createUser(@RequestBody User user) {
//        User savedUser = userRepository.save(user);
//
//        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
//                .buildAndExpand(savedUser.getId()).toUri();
//
//        return ResponseEntity.created(location).build();
//
//    }
//
//    //Read
//    //odbiega od innych ale moÅ¼na porownac
//    @GetMapping("/users/{id}")
//    public @ResponseBody
//    User getUserById(@PathVariable Integer id) {
//
//        return userRepository.findById(id)
//                .orElseThrow(() -> new UserNotFoundException());
//    }
//
//    //Update
//    @PutMapping("/users/{id}")
//    public ResponseEntity<Object> updateUser(@RequestBody User user, @PathVariable Integer id) {
//
//        Optional<User> userOptional = userRepository.findById(id);
//
//        if (!userOptional.isPresent())
//            return ResponseEntity.notFound().build();
//
//        user.setId(id);
//
//        userRepository.save(user);
//
//        return ResponseEntity.noContent().build();
//    }
//
//    //delete
//    @DeleteMapping("/users/{id}")
//    public void deleteUser(@PathVariable Integer id) {
//        userRepository.deleteById(id);
//    }



    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    @Autowired
    private UserService userService;


//    @GetMapping("/{id}")
//    public ApiResponse<User> getOne(@PathVariable int id){
//        return new ApiResponse<>(HttpStatus.OK.value(), "User fetched successfully.",userService.findById(id));
//    }
}
